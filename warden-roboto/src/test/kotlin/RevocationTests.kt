package at.asitplus.attestation.android

import com.zkdcloud.proxy.http.ServerStart
import com.zkdcloud.proxy.http.handler.client.ExceptionDuplexHandler
import com.zkdcloud.proxy.http.handler.client.JudgeTypeInboundHandler
import de.infix.testBalloon.framework.testSuite
import io.kotest.assertions.throwables.shouldThrow
import io.kotest.matchers.booleans.shouldBeFalse
import io.kotest.matchers.booleans.shouldBeTrue
import io.kotest.matchers.shouldBe
import io.ktor.client.*
import io.ktor.client.engine.*
import io.ktor.client.engine.cio.*
import io.ktor.client.engine.mock.*
import io.ktor.client.plugins.cache.*
import io.ktor.client.plugins.contentnegotiation.*
import io.ktor.http.*
import io.ktor.serialization.kotlinx.json.*
import io.ktor.util.date.*
import io.ktor.utils.io.*
import io.netty.bootstrap.ServerBootstrap
import io.netty.buffer.PooledByteBufAllocator
import io.netty.channel.Channel
import io.netty.channel.ChannelFuture
import io.netty.channel.ChannelInitializer
import io.netty.channel.ChannelOption
import io.netty.channel.nio.NioEventLoopGroup
import io.netty.channel.socket.nio.NioServerSocketChannel
import io.netty.handler.codec.http.HttpRequestDecoder
import io.netty.handler.codec.http.HttpResponseEncoder
import io.netty.handler.timeout.IdleStateHandler
import io.netty.util.concurrent.DefaultThreadFactory
import org.slf4j.LoggerFactory
import java.io.ByteArrayInputStream
import java.io.File
import java.math.BigInteger
import java.net.ConnectException
import java.nio.charset.StandardCharsets
import java.security.cert.CertificateFactory
import java.security.cert.X509Certificate
import java.util.concurrent.TimeUnit
import kotlin.math.min


const val TEST_STATUS_LIST_PATH = "../android-key-attestation/src/test/resources/status.json"

// Certificate generated by TestDPC with RSA Algorithm and StrongBox Security Level
val TEST_CERT = """
        -----BEGIN CERTIFICATE-----
        MIIB8zCCAXqgAwIBAgIRAMxm6ak3E7bmQ7JsFYeXhvcwCgYIKoZIzj0EAwIwOTEMMAoGA1UEDAwDVEVFMSkwJwYDVQQFEyA0ZjdlYzg1N2U4MDU3
        NDdjMWIxZWRhYWVmODk1NDk2ZDAeFw0xOTA4MTQxOTU0MTBaFw0yOTA4MTExOTU0MTBaMDkxDDAKBgNVBAwMA1RFRTEpMCcGA1UEBRMgMzJmYmJi
        NmRiOGM5MTdmMDdhYzlhYjZhZTQ4MTAzYWEwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQzg+sx9lLrkNIZwLYZerzL1bPK2zi75zFEuuI0fIr3
        5DJND1B4Z8RPZ3djzo3FOdAObqvoZ4CZVxcY3iQ1ffMMo2MwYTAdBgNVHQ4EFgQUzZOUqhJOO7wttSe9hYemjceVsgIwHwYDVR0jBBgwFoAUWlnI
        9iPzasns60heYXIP+h+Hz8owDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAgQwCgYIKoZIzj0EAwIDZwAwZAIwUFz/AKheCOPaBiRGDk7L
        aSEDXVYmTr0VoU8TbIqrKGWiiMwsGEmW+Jdo8EcKVPIwAjAoO7n1ruFh+6mEaTAukc6T5BW4MnmYadkkFSIjzDAaJ6lAq+nmmGQ1KlZpqi4Z/VI=
        -----END CERTIFICATE-----
        """.trimIndent()


val revocationTestFromGoogleSources by testSuite{

    "custom implementation" - {

        val factory = CertificateFactory.getInstance("X509")
        val cert =
            factory.generateCertificate(ByteArrayInputStream(TEST_CERT.toByteArray(StandardCharsets.UTF_8))) as X509Certificate
        val serialNumber = cert.serialNumber

        "load Test Serial" {

            AndroidAttestationChecker.RevocationList.from(File(TEST_STATUS_LIST_PATH).inputStream())
                .isRevoked(serialNumber).shouldBeTrue()
        }

        "test cache" - {

            "without HTTP Expiry Header" {
                var requestCounter = 0
                val client = MockEngine { _ ->
                    requestCounter++
                    respond(withExpiry = false)
                }.setup(null)
                val times = 1000
                repeat(times) {
                    AndroidAttestationChecker.RevocationList.fromGoogleServer(client)
                }
                requestCounter shouldBe times
            }

            "without HTTP Expiry Header" {
                var requestCounter = 0
                val client = MockEngine { _ ->
                    requestCounter++
                    respond(withExpiry = true)
                }.setup(null)
                val times = 1000
                repeat(times) {
                    AndroidAttestationChecker.RevocationList.fromGoogleServer(client)
                }
                requestCounter shouldBe 1
            }
        }

        "Test HTTP local proxy" {
            val client = HttpClient(CIO) { setup("http://localhost:1081") }
            shouldThrow<ConnectException> {
                AndroidAttestationChecker.RevocationList.fromGoogleServer(client)
            }
            startProxy()
            AndroidAttestationChecker.RevocationList.fromGoogleServer(client)
                .isRevoked(BigInteger("6681152659205225093", 16)) shouldBe true
        }

        "load Bad Serial" {
            AndroidAttestationChecker.RevocationList.from(File(TEST_STATUS_LIST_PATH).inputStream()).isRevoked(
                BigInteger.valueOf(0xbadbeef)
            ).shouldBeFalse()
        }


    }
}

private fun MockEngine.setup(proxyUrl: String?) = HttpClient(this) { setup(proxyUrl) }

//Ripped from MIT-Licences HTTP Proxy included as submodule. NOT PART OF RELEASE! Only Used for Testing
private fun startProxy(): ChannelFuture? {

    ServerStart.serverConfigure.port = 1081
    val serverBootstrap = ServerBootstrap()
    val logger = LoggerFactory.getLogger(ServerStart::class.java)

    val bossGroup = NioEventLoopGroup(
        min((Runtime.getRuntime().availableProcessors() + 1).toDouble(), 32.0)
            .toInt(), DefaultThreadFactory("boss-threads")
    )
    val workGroup = NioEventLoopGroup(
        ServerStart.serverConfigure.threadNumber,
        DefaultThreadFactory("workers-threads")
    )

    serverBootstrap.group(bossGroup, workGroup)
        .channel(NioServerSocketChannel::class.java)
        .childOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)
        .childOption(ChannelOption.TCP_NODELAY, true)
        .childHandler(object : ChannelInitializer<Channel>() {
            @Throws(Exception::class)
            override fun initChannel(ch: Channel) {
                ch.pipeline()
                    .addLast("idle", IdleStateHandler(0, 0, ServerStart.serverConfigure.idleTime, TimeUnit.SECONDS))
                    .addLast("http-decoder", HttpRequestDecoder())
                    .addLast("http-encoder", HttpResponseEncoder())
                    .addLast("connect-judge", JudgeTypeInboundHandler())
                    .addLast("exception", ExceptionDuplexHandler())
            }
        })
    val port = ServerStart.serverConfigure.port
    println("http server start at " + port)

    return serverBootstrap.bind(port).sync().channel().closeFuture()
}

private fun MockRequestHandleScope.respond(withExpiry: Boolean) = respond(
    content = ByteReadChannel(File(TEST_STATUS_LIST_PATH).readBytes()),
    status = HttpStatusCode.OK,
    headers = if (withExpiry) headersOf(
        HttpHeaders.ContentType to listOf("application/json"),
        HttpHeaders.Expires to listOf(GMTDate(getTimeMillis() + 3600_000).toHttpDate())
    ) else headersOf(HttpHeaders.ContentType to listOf("application/json"))
)

